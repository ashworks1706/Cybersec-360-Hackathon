# PhishGuard 360 - Production Docker Compose
version: '3.8'

services:
  # ============================================
  # Flask Backend Service
  # ============================================
  phishguard-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: phishguard-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DATABASE_URL=sqlite:///database/data/phishguard.db
      - LOG_LEVEL=INFO
      - API_RATE_LIMIT=100
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - phishguard_data:/app/database/data
      - phishguard_logs:/app/logs
      - phishguard_models:/app/models
      - phishguard_uploads:/app/uploads
    networks:
      - phishguard-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # ============================================
  # Redis Cache Service (Optional)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: phishguard-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - phishguard_redis:/data
    networks:
      - phishguard-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Nginx Reverse Proxy
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: phishguard-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - phishguard_logs:/var/log/nginx
    networks:
      - phishguard-network
    depends_on:
      - phishguard-backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Monitoring with Prometheus (Optional)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: phishguard-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - phishguard_prometheus:/prometheus
    networks:
      - phishguard-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

# ============================================
# Volumes for Data Persistence
# ============================================
volumes:
  phishguard_data:
    driver: local
  phishguard_logs:
    driver: local
  phishguard_models:
    driver: local
  phishguard_uploads:
    driver: local
  phishguard_redis:
    driver: local
  phishguard_prometheus:
    driver: local

# ============================================
# Networks
# ============================================
networks:
  phishguard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16